import unittest
from challenges import is_prime, sum_of_digits, is_palindrome, factorial, sum_of_list, is_even
from challenges import count_vowels, find_maximum, longest_substring, merge_intervals, word_ladder
from challenges import reverse_words, first_unique_char, is_valid_parentheses, remove_duplicates
from challenges import two_sum, is_anagram

class TestChallenges(unittest.TestCase):
    
    def test_is_prime(self):
        self.assertTrue(is_prime(2))
        self.assertTrue(is_prime(3))
        self.assertFalse(is_prime(4))
        self.assertTrue(is_prime(5))
        self.assertFalse(is_prime(1))
        self.assertFalse(is_prime(0))
        self.assertFalse(is_prime(-1))
        self.assertTrue(is_prime(7))
        self.assertFalse(is_prime(9))
        self.assertTrue(is_prime(11))
        self.assertFalse(is_prime(12))
        self.assertTrue(is_prime(13))
        self.assertFalse(is_prime(14))
        self.assertTrue(is_prime(17))
        self.assertFalse(is_prime(18))
        self.assertTrue(is_prime(19))
        self.assertFalse(is_prime(20))
        self.assertTrue(is_prime(23))
        self.assertFalse(is_prime(25))
        self.assertTrue(is_prime(29))
        self.assertFalse(is_prime(30))
        self.assertTrue(is_prime(31))
        self.assertFalse(is_prime(32))
        self.assertTrue(is_prime(37))
        self.assertFalse(is_prime(39))
        self.assertTrue(is_prime(41))
        self.assertFalse(is_prime(42))
        self.assertTrue(is_prime(43))
        self.assertFalse(is_prime(44))
        self.assertTrue(is_prime(47))
        self.assertFalse(is_prime(49))
        self.assertTrue(is_prime(53))
        self.assertFalse(is_prime(54))
        self.assertTrue(is_prime(59))
        self.assertFalse(is_prime(60))
        self.assertTrue(is_prime(61))
        self.assertFalse(is_prime(62))
        self.assertTrue(is_prime(67))
        self.assertFalse(is_prime(69))
        self.assertTrue(is_prime(71))
        self.assertFalse(is_prime(72))
        self.assertTrue(is_prime(73))
        self.assertFalse(is_prime(74))
        self.assertTrue(is_prime(79))
        self.assertFalse(is_prime(81))
        self.assertTrue(is_prime(83))
        self.assertFalse(is_prime(84))
        self.assertTrue(is_prime(89))
        self.assertFalse(is_prime(90))
        self.assertTrue(is_prime(97))
        self.assertFalse(is_prime(99))
        self.assertTrue(is_prime(101))
        self.assertFalse(is_prime(102))
        self.assertTrue(is_prime(103))
        self.assertFalse(is_prime(104))
        self.assertTrue(is_prime(107))
        self.assertFalse(is_prime(108))
        self.assertTrue(is_prime(109))
        self.assertFalse(is_prime(110))
        self.assertTrue(is_prime(113))
        self.assertFalse(is_prime(114))
        self.assertTrue(is_prime(127))
        self.assertFalse(is_prime(128))
        self.assertTrue(is_prime(131))
        self.assertFalse(is_prime(132))
        self.assertTrue(is_prime(137))
        self.assertFalse(is_prime(138))
        self.assertTrue(is_prime(139))
        self.assertFalse(is_prime(140))
        self.assertTrue(is_prime(149))
        self.assertFalse(is_prime(150))

    def test_sum_of_digits(self):
        self.assertEqual(sum_of_digits(123), 6)
        self.assertEqual(sum_of_digits(0), 0)
        self.assertEqual(sum_of_digits(456), 15)
        self.assertEqual(sum_of_digits(789), 24)
        self.assertEqual(sum_of_digits(1), 1)
        self.assertEqual(sum_of_digits(10), 1)
        self.assertEqual(sum_of_digits(100), 1)
        self.assertEqual(sum_of_digits(999), 27)
        self.assertEqual(sum_of_digits(1001), 2)
        self.assertEqual(sum_of_digits(1234), 10)
        self.assertEqual(sum_of_digits(5678), 26)
        self.assertEqual(sum_of_digits(9876), 30)
        self.assertEqual(sum_of_digits(1111), 4)
        self.assertEqual(sum_of_digits(2222), 8)
        self.assertEqual(sum_of_digits(3333), 12)
        self.assertEqual(sum_of_digits(4444), 16)
        self.assertEqual(sum_of_digits(5555), 20)
        self.assertEqual(sum_of_digits(6666), 24)
        self.assertEqual(sum_of_digits(7777), 28)
        self.assertEqual(sum_of_digits(8888), 32)
        self.assertEqual(sum_of_digits(1234567890), 45)
        self.assertEqual(sum_of_digits(9876543210), 45)
        self.assertEqual(sum_of_digits(1111111111), 10)
        self.assertEqual(sum_of_digits(2222222222), 20)
        self.assertEqual(sum_of_digits(3333333333), 30)
        self.assertEqual(sum_of_digits(4444444444), 40)
        self.assertEqual(sum_of_digits(5555555555), 50)
        self.assertEqual(sum_of_digits(6666666666), 60)
        self.assertEqual(sum_of_digits(7777777777), 70)
        self.assertEqual(sum_of_digits(8888888888), 80)
        self.assertEqual(sum_of_digits(9999999999), 90)
        self.assertEqual(sum_of_digits(12345678901234567890), 90)
        self.assertEqual(sum_of_digits(98765432109876543210), 90)
        self.assertEqual(sum_of_digits(1357924680), 45)
        self.assertEqual(sum_of_digits(2468135790), 45)
        self.assertEqual(sum_of_digits(1020304050607080900), 45)
        self.assertEqual(sum_of_digits(9080706050403020100), 45)
    
    def test_is_palindrome(self):
        self.assertTrue(is_palindrome("racecar"))
        self.assertTrue(is_palindrome("madam"))
        self.assertFalse(is_palindrome("hello"))
        self.assertTrue(is_palindrome("a"))
        self.assertTrue(is_palindrome(""))
        self.assertTrue(is_palindrome("level"))
        self.assertTrue(is_palindrome("radar"))
        self.assertTrue(is_palindrome("civic"))
        self.assertTrue(is_palindrome("deified"))
        self.assertTrue(is_palindrome("rotor"))
        self.assertTrue(is_palindrome("noon"))
        self.assertTrue(is_palindrome("refer"))
        self.assertTrue(is_palindrome("repaper"))
        self.assertTrue(is_palindrome("reviver"))
        self.assertTrue(is_palindrome("racecar"))
        self.assertTrue(is_palindrome("redder"))
        self.assertTrue(is_palindrome("madam"))
        self.assertTrue(is_palindrome("malayalam"))
        self.assertTrue(is_palindrome("mom"))
        self.assertTrue(is_palindrome("dad"))
        self.assertTrue(is_palindrome("wow"))
        self.assertTrue(is_palindrome("kayak"))
        self.assertTrue(is_palindrome("stats"))
        self.assertTrue(is_palindrome("tenet"))
        self.assertTrue(is_palindrome("solos"))
        self.assertTrue(is_palindrome("rotator"))
        self.assertTrue(is_palindrome("sagas"))
        self.assertTrue(is_palindrome("redivider"))
        self.assertTrue(is_palindrome("detartrated"))
        self.assertTrue(is_palindrome("deleveled"))
        self.assertTrue(is_palindrome("evitative"))
        self.assertTrue(is_palindrome("hannah"))
        self.assertTrue(is_palindrome("madamimadam"))
        self.assertTrue(is_palindrome("ablewasiereisawelba"))
        self.assertFalse(is_palindrome("palindrome"))
        self.assertFalse(is_palindrome("python"))
        self.assertFalse(is_palindrome("programming"))
        self.assertFalse(is_palindrome("example"))
        self.assertFalse(is_palindrome("test"))
        self.assertFalse(is_palindrome("string"))
        self.assertFalse(is_palindrome("function"))
        self.assertFalse(is_palindrome("challenge"))
        self.assertFalse(is_palindrome("coding"))
        self.assertFalse(is_palindrome("assistant"))
        self.assertFalse(is_palindrome("github"))
        self.assertFalse(is_palindrome("copilot"))
        self.assertFalse(is_palindrome("microsoft"))
        self.assertFalse(is_palindrome("openai"))
        self.assertFalse(is_palindrome("artificial"))
        self.assertFalse(is_palindrome("intelligence"))
        self.assertFalse(is_palindrome("machine"))
        self.assertFalse(is_palindrome("learning"))
        self.assertFalse(is_palindrome("data"))
        self.assertFalse(is_palindrome("science"))
        self.assertFalse(is_palindrome("algorithm"))
        self.assertFalse(is_palindrome("development"))
        self.assertFalse(is_palindrome("software"))
        self.assertFalse(is_palindrome("engineer"))
        self.assertFalse(is_palindrome("technology"))
        self.assertFalse(is_palindrome("innovation"))
        self.assertFalse(is_palindrome("future"))
        self.assertFalse(is_palindrome("education"))
        self.assertFalse(is_palindrome("knowledge"))
        self.assertFalse(is_palindrome("information"))
        self.assertFalse(is_palindrome("research"))
        self.assertFalse(is_palindrome("discovery"))

    def test_factorial(self):
        self.assertEqual(factorial(0), 1)
        self.assertEqual(factorial(1), 1)
        self.assertEqual(factorial(2), 2)
        self.assertEqual(factorial(3), 6)
        self.assertEqual(factorial(4), 24)
        self.assertEqual(factorial(5), 120)
        self.assertEqual(factorial(6), 720)
        self.assertEqual(factorial(7), 5040)
        self.assertEqual(factorial(8), 40320)
        self.assertEqual(factorial(9), 362880)
        self.assertEqual(factorial(10), 3628800)
        self.assertEqual(factorial(11), 39916800)
        self.assertEqual(factorial(12), 479001600)
        self.assertEqual(factorial(13), 6227020800)
        self.assertEqual(factorial(14), 87178291200)
        self.assertEqual(factorial(15), 1307674368000)
        self.assertEqual(factorial(16), 20922789888000)
        self.assertEqual(factorial(17), 355687428096000)
        self.assertEqual(factorial(18), 6402373705728000)
        self.assertEqual(factorial(19), 121645100408832000)
        self.assertEqual(factorial(20), 2432902008176640000)
        self.assertEqual(factorial(21), 51090942171709440000)
        self.assertEqual(factorial(22), 1124000727777607680000)
        self.assertEqual(factorial(23), 25852016738884976640000)
        self.assertEqual(factorial(24), 620448401733239439360000)
        self.assertEqual(factorial(25), 15511210043330985984000000)
        self.assertEqual(factorial(26), 403291461126605635584000000)
        self.assertEqual(factorial(27), 10888869450418352160768000000)
        self.assertEqual(factorial(28), 304888344611713860501504000000)
        self.assertEqual(factorial(29), 8841761993739701954543616000000)
        self.assertEqual(factorial(30), 265252859812191058636308480000000)
        self.assertEqual(factorial(31), 8222838654177922817725562880000000)
        self.assertEqual(factorial(32), 263130836933693530167218012160000000)
        self.assertEqual(factorial(33), 8683317618811886495518194401280000000)
        self.assertEqual(factorial(34), 295232799039604140847618609643520000000)
        self.assertEqual(factorial(35), 10333147966386144929666651337523200000000)

    def test_count_vowels(self):
        self.assertEqual(count_vowels("hello"), 2)
        self.assertEqual(count_vowels("world"), 1)
        self.assertEqual(count_vowels(""), 0)
        self.assertEqual(count_vowels("a"), 1)
        self.assertEqual(count_vowels("aeiou"), 5)
        self.assertEqual(count_vowels("bcdfghjklmnpqrstvwxyz"), 0)
        self.assertEqual(count_vowels("AEIOU"), 5)
        self.assertEqual(count_vowels("HELLO"), 2)
        self.assertEqual(count_vowels("WORLD"), 1)
        self.assertEqual(count_vowels("Python"), 1)
        self.assertEqual(count_vowels("Programming"), 3)
        self.assertEqual(count_vowels("Vowels"), 2)
        self.assertEqual(count_vowels("Consonants"), 3)
        self.assertEqual(count_vowels("abcdefghijklmnopqrstuvwxyz"), 5)
        self.assertEqual(count_vowels("ABCDEFGHIJKLMNOPQRSTUVWXYZ"), 5)
        self.assertEqual(count_vowels("12345"), 0)
        self.assertEqual(count_vowels("!@#$%"), 0)
        self.assertEqual(count_vowels("aeiouAEIOU"), 10)
        self.assertEqual(count_vowels("bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ"), 0)
        self.assertEqual(count_vowels("The quick brown fox jumps over the lazy dog"), 11)
        self.assertEqual(count_vowels("Lorem ipsum dolor sit amet"), 9)
        self.assertEqual(count_vowels("A man a plan a canal Panama"), 10)
        self.assertEqual(count_vowels("Was it a car or a cat I saw"), 9)
        self.assertEqual(count_vowels("No lemon no melon"), 6)
        self.assertEqual(count_vowels("Madam in Eden Im Adam"), 8)
        self.assertEqual(count_vowels("Able was I ere I saw Elba"), 10)
        self.assertEqual(count_vowels("Never odd or even"), 6)
        self.assertEqual(count_vowels("Doc note I dissent A fast never prevents a fatness I diet on cod"), 20)
        self.assertEqual(count_vowels("Eva can I see bees in a cave"), 12)
        self.assertEqual(count_vowels("Mr Owl ate my metal worm"), 6)
        self.assertEqual(count_vowels("A Santa at NASA"), 6)

    def test_find_maximum(self):
        self.assertEqual(find_maximum([1, 2, 3, 4, 5]), 5)
        self.assertEqual(find_maximum([5, 4, 3, 2, 1]), 5)
        self.assertEqual(find_maximum([1]), 1)
        self.assertEqual(find_maximum([0, -1, -2, -3, -4]), 0)
        self.assertEqual(find_maximum([-1, -2, -3, -4, -5]), -1)
        self.assertEqual(find_maximum([100, 200, 300, 400, 500]), 500)
        self.assertEqual(find_maximum([500, 400, 300, 200, 100]), 500)
        self.assertEqual(find_maximum([1, 1, 1, 1, 1]), 1)
        self.assertEqual(find_maximum([1, 2, 3, 2, 1]), 3)
        self.assertEqual(find_maximum([3, 2, 1, 2, 3]), 3)
        self.assertEqual(find_maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 10)
        self.assertEqual(find_maximum([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]), 10)
        self.assertEqual(find_maximum([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]), 10)
        self.assertEqual(find_maximum([10, 8, 6, 4, 2, 9, 7, 5, 3, 1]), 10)
        self.assertEqual(find_maximum([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]), 5)
        self.assertEqual(find_maximum([5, 4, 3, 2, 1, 1, 2, 3, 4, 5]), 5)
        self.assertEqual(find_maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]), 9)
        self.assertEqual(find_maximum([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]), 9)
        self.assertEqual(find_maximum([1, 3, 5, 7, 9, 0, 2, 4, 6, 8]), 9)
        self.assertEqual(find_maximum([9, 7, 5, 3, 1, 8, 6, 4, 2, 0]), 9)
        self.assertEqual(find_maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 15)
        self.assertEqual(find_maximum([15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]), 15)
        self.assertEqual(find_maximum([1, 3, 5, 7, 9, 11, 13, 15, 2, 4, 6, 8, 10, 12, 14]), 15)
        self.assertEqual(find_maximum([15, 13, 11, 9, 7, 5, 3, 1, 14, 12, 10, 8, 6, 4, 2]), 15)
        self.assertEqual(find_maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 20)
        self.assertEqual(find_maximum([20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]), 20)
        self.assertEqual(find_maximum([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]), 20)
        self.assertEqual(find_maximum([20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]), 20)
        self.assertEqual(find_maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]), 25)
        self.assertEqual(find_maximum([25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]), 25)
        self.assertEqual(find_maximum([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]), 25)
        self.assertEqual(find_maximum([25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2]), 25)


    def test_sum_of_list(self):
        self.assertEqual(sum_of_list([1, 2, 3, 4, 5]), 15)
        self.assertEqual(sum_of_list([5, 4, 3, 2, 1]), 15)
        self.assertEqual(sum_of_list([1]), 1)
        self.assertEqual(sum_of_list([0, -1, -2, -3, -4]), -10)
        self.assertEqual(sum_of_list([-1, -2, -3, -4, -5]), -15)
        self.assertEqual(sum_of_list([100, 200, 300, 400, 500]), 1500)
        self.assertEqual(sum_of_list([500, 400, 300, 200, 100]), 1500)
        self.assertEqual(sum_of_list([1, 1, 1, 1, 1]), 5)
        self.assertEqual(sum_of_list([1, 2, 3, 2, 1]), 9)
        self.assertEqual(sum_of_list([3, 2, 1, 2, 3]), 11)
        self.assertEqual(sum_of_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 55)

    def test_is_even(self):
        self.assertTrue(is_even(2))
        self.assertTrue(is_even(4))
        self.assertTrue(is_even(6))
        self.assertTrue(is_even(8))
        self.assertTrue(is_even(10))
        self.assertTrue(is_even(0))
        self.assertTrue(is_even(-2))
        self.assertTrue(is_even(-4))
        self.assertTrue(is_even(-6))
        self.assertTrue(is_even(-8))
        self.assertTrue(is_even(-10))
        self.assertFalse(is_even(1))
        self.assertFalse(is_even(3))
        self.assertFalse(is_even(5))
        self.assertFalse(is_even(7))
        self.assertFalse(is_even(9))
        self.assertFalse(is_even(-1))
        self.assertFalse(is_even(-3))
        self.assertFalse(is_even(-5))
        self.assertFalse(is_even(-7))
        self.assertFalse(is_even(-9))
        self.assertTrue(is_even(100))
        self.assertTrue(is_even(1000))
        self.assertTrue(is_even(10000))
        self.assertTrue(is_even(100000))
        self.assertTrue(is_even(1000000))
        self.assertFalse(is_even(100001))
        self.assertFalse(is_even(100003))
        self.assertFalse(is_even(100005))
        self.assertFalse(is_even(100007))
        self.assertFalse(is_even(100009))
        self.assertTrue(is_even(-100))
        self.assertTrue(is_even(-1000))
        self.assertTrue(is_even(-10000))
        self.assertTrue(is_even(-100000))
        self.assertTrue(is_even(-1000000))

    def test_longest_substring(self):
        self.assertEqual(longest_substring("abcabcbb"), 3)
        self.assertEqual(longest_substring("bbbbb"), 1)
        self.assertEqual(longest_substring("pwwkew"), 3)
        self.assertEqual(longest_substring(""), 0)
        self.assertEqual(longest_substring("a"), 1)
        self.assertEqual(longest_substring("au"), 2)
        self.assertEqual(longest_substring("dvdf"), 3)
        self.assertEqual(longest_substring("anviaj"), 5)
        self.assertEqual(longest_substring("tmmzuxt"), 5)
        self.assertEqual(longest_substring("abcdefg"), 7)
        self.assertEqual(longest_substring("abccba"), 3)
        self.assertEqual(longest_substring("abac"), 3)
        self.assertEqual(longest_substring("aabbcc"), 2)
        self.assertEqual(longest_substring("aab"), 2)
        self.assertEqual(longest_substring("ab"), 2)
        self.assertEqual(longest_substring("abba"), 2)
        self.assertEqual(longest_substring("abcdabcde"), 5)
        self.assertEqual(longest_substring("abcdeabc"), 5)
        self.assertEqual(longest_substring("abcabcabc"), 3)
        self.assertEqual(longest_substring("abacabad"), 4)
        self.assertEqual(longest_substring("abacabadabacaba"), 4)
        self.assertEqual(longest_substring("abacabadabacabad"), 4)
        self.assertEqual(longest_substring("abacabadabacabadabacaba"), 4)
        self.assertEqual(longest_substring("abacabadabacabadabacabad"), 4)
        self.assertEqual(longest_substring("abacabadabacabadabacabadabacaba"), 4)
        self.assertEqual(longest_substring("abacabadabacabadabacabadabacabad"), 4)
        self.assertEqual(longest_substring("abacabadabacabadabacabadabacabadabacaba"), 4)
        self.assertEqual(longest_substring("abacabadabacabadabacabadabacabadabacabad"), 4)
        self.assertEqual(longest_substring("abacabadabacabadabacabadabacabadabacabadabacaba"), 4)
        self.assertEqual(longest_substring("abacabadabacabadabacabadabacabadabacabadabacabad"), 4)

    def test_merge_intervals(self):
        self.assertEqual(merge_intervals([[1, 3], [2, 6], [8, 10], [15, 18]]), [[1, 6], [8, 10], [15, 18]])
        self.assertEqual(merge_intervals([[1, 4], [4, 5]]), [[1, 5]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3]]), [[1, 4]])
        self.assertEqual(merge_intervals([[1, 4], [0, 4]]), [[0, 4]])
        self.assertEqual(merge_intervals([[1, 4], [0, 1]]), [[0, 4]])
        self.assertEqual(merge_intervals([[1, 4], [0, 0]]), [[0, 0], [1, 4]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8]]), [[1, 4], [5, 8]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10]]), [[1, 4], [5, 8], [9, 10]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11]]), [[1, 4], [5, 8], [9, 11]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13]]), [[1, 4], [5, 8], [9, 11], [12, 13]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14]]), [[1, 4], [5, 8], [9, 11], [12, 14]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 16]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 19]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19], [19, 20]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 20]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19], [19, 20], [21, 22]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 20], [21, 22]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19], [19, 20], [21, 22], [22, 23]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 20], [21, 23]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19], [19, 20], [21, 22], [22, 23], [24, 25]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 20], [21, 23], [24, 25]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19], [19, 20], [21, 22], [22, 23], [24, 25], [25, 26]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 20], [21, 23], [24, 26]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19], [19, 20], [21, 22], [22, 23], [24, 25], [25, 26], [27, 28]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 20], [21, 23], [24, 26], [27, 28]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19], [19, 20], [21, 22], [22, 23], [24, 25], [25, 26], [27, 28], [28, 29]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 20], [21, 23], [24, 26], [27, 29]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19], [19, 20], [21, 22], [22, 23], [24, 25], [25, 26], [27, 28], [28, 29], [30, 31]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 20], [21, 23], [24, 26], [27, 29], [30, 31]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19], [19, 20], [21, 22], [22, 23], [24, 25], [25, 26], [27, 28], [28, 29], [30, 31], [31, 32]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 20], [21, 23], [24, 26], [27, 29], [30, 32]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19], [19, 20], [21, 22], [22, 23], [24, 25], [25, 26], [27, 28], [28, 29], [30, 31], [31, 32], [33, 34]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 20], [21, 23], [24, 26], [27, 29], [30, 32], [33, 34]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19], [19, 20], [21, 22], [22, 23], [24, 25], [25, 26], [27, 28], [28, 29], [30, 31], [31, 32], [33, 34], [34, 35]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 20], [21, 23], [24, 26], [27, 29], [30, 32], [33, 35]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19], [19, 20], [21, 22], [22, 23], [24, 25], [25, 26], [27, 28], [28, 29], [30, 31], [31, 32], [33, 34], [34, 35], [36, 37]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 20], [21, 23], [24, 26], [27, 29], [30, 32], [33, 35], [36, 37]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19], [19, 20], [21, 22], [22, 23], [24, 25], [25, 26], [27, 28], [28, 29], [30, 31], [31, 32], [33, 34], [34, 35], [36, 37], [37, 38]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 20], [21, 23], [24, 26], [27, 29], [30, 32], [33, 35], [36, 38]])
        self.assertEqual(merge_intervals([[1, 4], [2, 3], [5, 7], [6, 8], [9, 10], [10, 11], [12, 13], [13, 14], [15, 16], [16, 17], [18, 19], [19, 20], [21, 22], [22, 23], [24, 25], [25, 26], [27, 28], [28, 29], [30, 31], [31, 32], [33, 34], [34, 35], [36, 37], [37, 38], [39, 40]]), [[1, 4], [5, 8], [9, 11], [12, 14], [15, 17], [18, 20], [21, 23], [24, 26], [27, 29], [30, 32], [33, 35], [36, 38], [39, 40]])

    def test_word_ladder(self):
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log"]), 0)
        self.assertEqual(word_ladder("hit", "hot", ["hot", "dot", "dog", "lot", "log", "cog"]), 2)
        self.assertEqual(word_ladder("hit", "hit", ["hot", "dot", "dog", "lot", "log", "cog"]), 1)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog"]), 4)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot"]), 4)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit"]), 4)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit", "but"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit", "but", "bot"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit", "but", "bot", "bog"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit", "but", "bot", "bog", "bag"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit", "but", "bot", "bog", "bag", "big"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit", "but", "bot", "bog", "bag", "big", "bug"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit", "but", "bot", "bog", "bag", "big", "bug", "bun"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit", "but", "bot", "bog", "bag", "big", "bug", "bun", "ban"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit", "but", "bot", "bog", "bag", "big", "bug", "bun", "ban", "can"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit", "but", "bot", "bog", "bag", "big", "bug", "bun", "ban", "can", "con"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit", "but", "bot", "bog", "bag", "big", "bug", "bun", "ban", "can", "con", "cot"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit", "but", "bot", "bog", "bag", "big", "bug", "bun", "ban", "can", "con", "cot", "cog"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit", "but", "bot", "bog", "bag", "big", "bug", "bun", "ban", "can", "con", "cot", "cog", "cog"]), 5)
        self.assertEqual(word_ladder("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog", "hit", "hog", "cot", "cit", "hat", "hut", "cut", "cat", "bat", "bit", "but", "bot", "bog", "bag", "big", "bug", "bun", "ban", "can", "con", "cot", "cog", "cog", "cog"]), 5)

    def test_reverse_words(self):
        self.assertEqual(reverse_words("the sky is blue"), "blue is sky the")
        self.assertEqual(reverse_words("hello world"), "world hello")
        self.assertEqual(reverse_words("a b c"), "c b a")
        self.assertEqual(reverse_words(""), "")
        self.assertEqual(reverse_words("single"), "single")
        self.assertEqual(reverse_words("two words"), "words two")
        self.assertEqual(reverse_words("multiple words in a sentence"), "sentence a in words multiple")
        self.assertEqual(reverse_words("leading space "), "space leading")
        self.assertEqual(reverse_words(" trailing space"), "space trailing")
        self.assertEqual(reverse_words("  multiple   spaces  "), "spaces multiple")
        self.assertEqual(reverse_words("word"), "word")
        self.assertEqual(reverse_words("word word"), "word word")
        self.assertEqual(reverse_words("word  word"), "word word")
        self.assertEqual(reverse_words("  word  word  "), "word word")
        self.assertEqual(reverse_words("a quick brown fox"), "fox brown quick a")
        self.assertEqual(reverse_words("jumps over the lazy dog"), "dog lazy the over jumps")
        self.assertEqual(reverse_words("Python is fun"), "fun is Python")
        self.assertEqual(reverse_words("Unit tests are important"), "important are tests Unit")
        self.assertEqual(reverse_words("Reverse these words"), "words these Reverse")
        self.assertEqual(reverse_words("Keep it simple"), "simple it Keep")
        self.assertEqual(reverse_words("This is a test"), "test a is This")
        self.assertEqual(reverse_words("Another example sentence"), "sentence example Another")
        self.assertEqual(reverse_words("Edge cases are tricky"), "tricky are cases Edge")
        self.assertEqual(reverse_words("Handle multiple spaces"), "spaces multiple Handle")
        self.assertEqual(reverse_words("Check for empty string"), "string empty for Check")

    def test_first_unique_char(self):
        self.assertEqual(first_unique_char("leetcode"), 0)
        self.assertEqual(first_unique_char("loveleetcode"), 2)
        self.assertEqual(first_unique_char("aabb"), -1)
        self.assertEqual(first_unique_char(""), -1)
        self.assertEqual(first_unique_char("a"), 0)
        self.assertEqual(first_unique_char("aa"), -1)
        self.assertEqual(first_unique_char("ab"), 0)
        self.assertEqual(first_unique_char("aabbccddeeffg"), 12)
        self.assertEqual(first_unique_char("aabbccddeeffgg"), -1)
        self.assertEqual(first_unique_char("abcabcabc"), -1)
        self.assertEqual(first_unique_char("abcabcabcd"), 9)
        self.assertEqual(first_unique_char("aabbccddeeffgghhii"), -1)
        self.assertEqual(first_unique_char("aabbccddeeffgghhiijj"), -1)
        self.assertEqual(first_unique_char("z"), 0)
        self.assertEqual(first_unique_char("zz"), -1)
        self.assertEqual(first_unique_char("abcdefghijklmnopqrstuvwxyz"), 0)
        self.assertEqual(first_unique_char("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"), -1)
        self.assertEqual(first_unique_char("aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz"), -1)
        self.assertEqual(first_unique_char("aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzA"), 52)
        self.assertEqual(first_unique_char("aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzAA"), -1)
        self.assertEqual(first_unique_char("aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzAB"), 52)
        self.assertEqual(first_unique_char("aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzABAB"), -1)
        self.assertEqual(first_unique_char("aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzABABCD"), 56)
        self.assertEqual(first_unique_char("aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzABABCDCD"), -1)
        self.assertEqual(first_unique_char("aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzABABCDCDXY"), 60)

    def test_is_valid_parentheses(self):
        self.assertTrue(is_valid_parentheses("()"))
        self.assertTrue(is_valid_parentheses("()[]{}"))
        self.assertFalse(is_valid_parentheses("(]"))
        self.assertFalse(is_valid_parentheses("([)]"))
        self.assertTrue(is_valid_parentheses("{[]}"))
        self.assertTrue(is_valid_parentheses(""))
        self.assertFalse(is_valid_parentheses("("))
        self.assertFalse(is_valid_parentheses(")"))
        self.assertFalse(is_valid_parentheses("({"))
        self.assertFalse(is_valid_parentheses("})"))
        self.assertTrue(is_valid_parentheses("()()"))
        self.assertTrue(is_valid_parentheses("([])"))
        self.assertFalse(is_valid_parentheses("([)"))
        self.assertFalse(is_valid_parentheses("{[}]"))
        self.assertTrue(is_valid_parentheses("{[()]}"))
        self.assertFalse(is_valid_parentheses("{[(])}"))
        self.assertTrue(is_valid_parentheses("((()))"))
        self.assertFalse(is_valid_parentheses("((())"))
        self.assertTrue(is_valid_parentheses("{{{{}}}}"))
        self.assertFalse(is_valid_parentheses("{{{{}}}"))
        self.assertTrue(is_valid_parentheses("[[[[]]]]"))
        self.assertFalse(is_valid_parentheses("[[[[]]]"))
        self.assertTrue(is_valid_parentheses("{[()()]}"))
        self.assertFalse(is_valid_parentheses("{[()()]"))
        self.assertTrue(is_valid_parentheses("(){}[]"))

    def test_remove_duplicates(self):
        nums = [1, 1, 2]
        length = remove_duplicates(nums)
        self.assertEqual(length, 2)
        self.assertEqual(nums[:length], [1, 2])

        nums = [0,0,1,1,1,2,2,3,3,4]
        length = remove_duplicates(nums)
        self.assertEqual(length, 5)
        self.assertEqual(nums[:length], [0, 1, 2, 3, 4])

        nums = []
        length = remove_duplicates(nums)
        self.assertEqual(length, 0)
        self.assertEqual(nums[:length], [])

        nums = [1]
        length = remove_duplicates(nums)
        self.assertEqual(length, 1)
        self.assertEqual(nums[:length], [1])

        nums = [1, 2, 3, 4, 5]
        length = remove_duplicates(nums)
        self.assertEqual(length, 5)
        self.assertEqual(nums[:length], [1, 2, 3, 4, 5])

        nums = [1, 1, 1, 1, 1]
        length = remove_duplicates(nums)
        self.assertEqual(length, 1)
        self.assertEqual(nums[:length], [1])

        nums = [1, 2, 2, 3, 3, 4, 4, 5, 5]
        length = remove_duplicates(nums)
        self.assertEqual(length, 5)
        self.assertEqual(nums[:length], [1, 2, 3, 4, 5])

        nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]
        length = remove_duplicates(nums)
        self.assertEqual(length, 5)
        self.assertEqual(nums[:length], [1, 2, 3, 4, 5])

        nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        length = remove_duplicates(nums)
        self.assertEqual(length, 10)
        self.assertEqual(nums[:length], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

        nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        length = remove_duplicates(nums)
        self.assertEqual(length, 1)
        self.assertEqual(nums[:length], [0])

        nums = [1, 2, 2, 2, 3, 4, 4, 5, 6, 6]
        length = remove_duplicates(nums)
        self.assertEqual(length, 6)
        self.assertEqual(nums[:length], [1, 2, 3, 4, 5, 6])

        nums = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6]
        length = remove_duplicates(nums)
        self.assertEqual(length, 6)
        self.assertEqual(nums[:length], [1, 2, 3, 4, 5, 6])

        nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        length = remove_duplicates(nums)
        self.assertEqual(length, 10)
        self.assertEqual(nums[:length], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

        nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        length = remove_duplicates(nums)
        self.assertEqual(length, 10)
        self.assertEqual(nums[:length], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

        nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]
        length = remove_duplicates(nums)
        self.assertEqual(length, 10)
        self.assertEqual(nums[:length], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

        nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        length = remove_duplicates(nums)
        self.assertEqual(length, 1)
        self.assertEqual(nums[:length], [1])

        nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]
        length = remove_duplicates(nums)
        self.assertEqual(length, 10)
        self.assertEqual(nums[:length], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

        nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11]
        length = remove_duplicates(nums)
        self.assertEqual(length, 11)
        self.assertEqual(nums[:length], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])

        nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7]
        length = remove_duplicates(nums)
        self.assertEqual(length, 7)
        self.assertEqual(nums[:length], [1, 2, 3, 4, 5, 6, 7])

        nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]
        length = remove_duplicates(nums)
        self.assertEqual(length, 2)
        self.assertEqual(nums[:length], [1, 2])

        nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        length = remove_duplicates(nums)
        self.assertEqual(length, 1)
        self.assertEqual(nums[:length], [1])

        nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        length = remove_duplicates(nums)
        self.assertEqual(length, 20)
        self.assertEqual(nums[:length], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])

    def test_two_sum(self):
        self.assertEqual(two_sum([2, 7, 11, 15], 9), [0, 1])
        self.assertEqual(two_sum([3, 2, 4], 6), [1, 2])
        self.assertEqual(two_sum([3, 3], 6), [0, 1])
        self.assertEqual(two_sum([1, 2, 3, 4, 5], 9), [3, 4])
        self.assertEqual(two_sum([1, 2, 3, 4, 5], 3), [0, 1])
        self.assertEqual(two_sum([1, 2, 3, 4, 5], 11), None)
        self.assertEqual(two_sum([1, 2, 3, 4, 5], 1), None)
        self.assertEqual(two_sum([1, 2, 3, 4, 5], 10), None)
        self.assertEqual(two_sum([1, 2, 3, 4, 5], 8), [2, 4])
        self.assertEqual(two_sum([1, 2, 3, 4, 5], 4), [0, 2])
        self.assertEqual(two_sum([1, 2, 3, 4, 5], 2), None)
        self.assertEqual(two_sum([1, 2, 3, 4, 5], 0), None)
        self.assertEqual(two_sum([1, 2, 3, 4, 5], -1), None)
        self.assertEqual(two_sum([1, 2, 3, 4, 6], 7), [0, 4])
        self.assertEqual(two_sum([1, 2, 3, 4, 6], 8), [1, 4])
        self.assertEqual(two_sum([1, 2, 3, 4, 6], 9), [2, 4])
        self.assertEqual(two_sum([1, 2, 3, 4, 6], 10), [3, 4])
        self.assertEqual(two_sum([1, 2, 3, 4, 6], 11), None)
        self.assertEqual(two_sum([1, 2, 3, 4, 6], 12), None)
        self.assertEqual(two_sum([1, 2, 3, 4, 6], 13), None)
        self.assertEqual(two_sum([1, 2, 3, 4, 6], 14), None)
        self.assertEqual(two_sum([1, 2, 3, 4, 6], 15), None)
        self.assertEqual(two_sum([1, 2, 3, 4, 6], 16), None)

    def test_is_anagram(self):
        self.assertTrue(is_anagram("anagram", "nagaram"))
        self.assertFalse(is_anagram("rat", "car"))
        self.assertTrue(is_anagram("listen", "silent"))
        self.assertTrue(is_anagram("evil", "vile"))
        self.assertTrue(is_anagram("fluster", "restful"))
        self.assertFalse(is_anagram("fluster", "restfull"))
        self.assertTrue(is_anagram("binary", "brainy"))
        self.assertTrue(is_anagram("adobe", "abode"))
        self.assertFalse(is_anagram("adobe", "abodes"))
        self.assertTrue(is_anagram("night", "thing"))
        self.assertTrue(is_anagram("inch", "chin"))
        self.assertFalse(is_anagram("inch", "chins"))
        self.assertTrue(is_anagram("dusty", "study"))
        self.assertTrue(is_anagram("elbow", "below"))
        self.assertFalse(is_anagram("elbow", "belows"))
        self.assertTrue(is_anagram("state", "taste"))
        self.assertTrue(is_anagram("angel", "glean"))
        self.assertFalse(is_anagram("angel", "gleans"))
        self.assertTrue(is_anagram("brag", "grab"))
        self.assertTrue(is_anagram("cat", "act"))
        self.assertFalse(is_anagram("cat", "acts"))
        self.assertTrue(is_anagram("bored", "robed"))
        self.assertTrue(is_anagram("save", "vase"))
        self.assertFalse(is_anagram("save", "vases"))
        self.assertTrue(is_anagram("stressed", "desserts"))

    def test_sanity(self):
        s = 'aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzABABCDCDXY'
        print(len(s))
        for i in range(0, len(s)):
            if s[i] == 'X':
                print(i)

if __name__ == '__main__':
    unittest.main()